// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_users

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func UsersDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"users": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"comment_notifications": schema.BoolAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"donation_notifications": schema.BoolAttribute{
							Computed: true,
						},
						"email": schema.StringAttribute{
							Computed: true,
						},
						"free_member_signup_notification": schema.BoolAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"last_seen": schema.StringAttribute{
							Computed: true,
						},
						"mention_notifications": schema.BoolAttribute{
							Computed: true,
						},
						"milestone_notifications": schema.BoolAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"paid_subscription_canceled_notification": schema.BoolAttribute{
							Computed: true,
						},
						"paid_subscription_started_notification": schema.BoolAttribute{
							Computed: true,
						},
						"recommendation_notifications": schema.BoolAttribute{
							Computed: true,
						},
						"slug": schema.StringAttribute{
							Computed: true,
						},
						"status": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
						},
						"url": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: UsersType{
						ObjectType: types.ObjectType{
							AttrTypes: UsersValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type UsersModel struct {
	Users types.List `tfsdk:"users"`
}

var _ basetypes.ObjectTypable = UsersType{}

type UsersType struct {
	basetypes.ObjectType
}

func (t UsersType) Equal(o attr.Type) bool {
	other, ok := o.(UsersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UsersType) String() string {
	return "UsersType"
}

func (t UsersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	commentNotificationsAttribute, ok := attributes["comment_notifications"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`comment_notifications is missing from object`)

		return nil, diags
	}

	commentNotificationsVal, ok := commentNotificationsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`comment_notifications expected to be basetypes.BoolValue, was: %T`, commentNotificationsAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	donationNotificationsAttribute, ok := attributes["donation_notifications"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`donation_notifications is missing from object`)

		return nil, diags
	}

	donationNotificationsVal, ok := donationNotificationsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`donation_notifications expected to be basetypes.BoolValue, was: %T`, donationNotificationsAttribute))
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return nil, diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	freeMemberSignupNotificationAttribute, ok := attributes["free_member_signup_notification"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`free_member_signup_notification is missing from object`)

		return nil, diags
	}

	freeMemberSignupNotificationVal, ok := freeMemberSignupNotificationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`free_member_signup_notification expected to be basetypes.BoolValue, was: %T`, freeMemberSignupNotificationAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	lastSeenAttribute, ok := attributes["last_seen"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_seen is missing from object`)

		return nil, diags
	}

	lastSeenVal, ok := lastSeenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_seen expected to be basetypes.StringValue, was: %T`, lastSeenAttribute))
	}

	mentionNotificationsAttribute, ok := attributes["mention_notifications"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mention_notifications is missing from object`)

		return nil, diags
	}

	mentionNotificationsVal, ok := mentionNotificationsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mention_notifications expected to be basetypes.BoolValue, was: %T`, mentionNotificationsAttribute))
	}

	milestoneNotificationsAttribute, ok := attributes["milestone_notifications"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`milestone_notifications is missing from object`)

		return nil, diags
	}

	milestoneNotificationsVal, ok := milestoneNotificationsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`milestone_notifications expected to be basetypes.BoolValue, was: %T`, milestoneNotificationsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	paidSubscriptionCanceledNotificationAttribute, ok := attributes["paid_subscription_canceled_notification"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`paid_subscription_canceled_notification is missing from object`)

		return nil, diags
	}

	paidSubscriptionCanceledNotificationVal, ok := paidSubscriptionCanceledNotificationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`paid_subscription_canceled_notification expected to be basetypes.BoolValue, was: %T`, paidSubscriptionCanceledNotificationAttribute))
	}

	paidSubscriptionStartedNotificationAttribute, ok := attributes["paid_subscription_started_notification"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`paid_subscription_started_notification is missing from object`)

		return nil, diags
	}

	paidSubscriptionStartedNotificationVal, ok := paidSubscriptionStartedNotificationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`paid_subscription_started_notification expected to be basetypes.BoolValue, was: %T`, paidSubscriptionStartedNotificationAttribute))
	}

	recommendationNotificationsAttribute, ok := attributes["recommendation_notifications"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`recommendation_notifications is missing from object`)

		return nil, diags
	}

	recommendationNotificationsVal, ok := recommendationNotificationsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`recommendation_notifications expected to be basetypes.BoolValue, was: %T`, recommendationNotificationsAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return nil, diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UsersValue{
		CommentNotifications:                 commentNotificationsVal,
		CreatedAt:                            createdAtVal,
		DonationNotifications:                donationNotificationsVal,
		Email:                                emailVal,
		FreeMemberSignupNotification:         freeMemberSignupNotificationVal,
		Id:                                   idVal,
		LastSeen:                             lastSeenVal,
		MentionNotifications:                 mentionNotificationsVal,
		MilestoneNotifications:               milestoneNotificationsVal,
		Name:                                 nameVal,
		PaidSubscriptionCanceledNotification: paidSubscriptionCanceledNotificationVal,
		PaidSubscriptionStartedNotification:  paidSubscriptionStartedNotificationVal,
		RecommendationNotifications:          recommendationNotificationsVal,
		Slug:                                 slugVal,
		Status:                               statusVal,
		UpdatedAt:                            updatedAtVal,
		Url:                                  urlVal,
		state:                                attr.ValueStateKnown,
	}, diags
}

func NewUsersValueNull() UsersValue {
	return UsersValue{
		state: attr.ValueStateNull,
	}
}

func NewUsersValueUnknown() UsersValue {
	return UsersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUsersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UsersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UsersValue Attribute Value",
				"While creating a UsersValue value, a missing attribute value was detected. "+
					"A UsersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UsersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UsersValue Attribute Type",
				"While creating a UsersValue value, an invalid attribute value was detected. "+
					"A UsersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UsersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UsersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UsersValue Attribute Value",
				"While creating a UsersValue value, an extra attribute value was detected. "+
					"A UsersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UsersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUsersValueUnknown(), diags
	}

	commentNotificationsAttribute, ok := attributes["comment_notifications"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`comment_notifications is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	commentNotificationsVal, ok := commentNotificationsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`comment_notifications expected to be basetypes.BoolValue, was: %T`, commentNotificationsAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	donationNotificationsAttribute, ok := attributes["donation_notifications"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`donation_notifications is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	donationNotificationsVal, ok := donationNotificationsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`donation_notifications expected to be basetypes.BoolValue, was: %T`, donationNotificationsAttribute))
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	freeMemberSignupNotificationAttribute, ok := attributes["free_member_signup_notification"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`free_member_signup_notification is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	freeMemberSignupNotificationVal, ok := freeMemberSignupNotificationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`free_member_signup_notification expected to be basetypes.BoolValue, was: %T`, freeMemberSignupNotificationAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	lastSeenAttribute, ok := attributes["last_seen"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_seen is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	lastSeenVal, ok := lastSeenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_seen expected to be basetypes.StringValue, was: %T`, lastSeenAttribute))
	}

	mentionNotificationsAttribute, ok := attributes["mention_notifications"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mention_notifications is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	mentionNotificationsVal, ok := mentionNotificationsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mention_notifications expected to be basetypes.BoolValue, was: %T`, mentionNotificationsAttribute))
	}

	milestoneNotificationsAttribute, ok := attributes["milestone_notifications"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`milestone_notifications is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	milestoneNotificationsVal, ok := milestoneNotificationsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`milestone_notifications expected to be basetypes.BoolValue, was: %T`, milestoneNotificationsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	paidSubscriptionCanceledNotificationAttribute, ok := attributes["paid_subscription_canceled_notification"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`paid_subscription_canceled_notification is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	paidSubscriptionCanceledNotificationVal, ok := paidSubscriptionCanceledNotificationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`paid_subscription_canceled_notification expected to be basetypes.BoolValue, was: %T`, paidSubscriptionCanceledNotificationAttribute))
	}

	paidSubscriptionStartedNotificationAttribute, ok := attributes["paid_subscription_started_notification"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`paid_subscription_started_notification is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	paidSubscriptionStartedNotificationVal, ok := paidSubscriptionStartedNotificationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`paid_subscription_started_notification expected to be basetypes.BoolValue, was: %T`, paidSubscriptionStartedNotificationAttribute))
	}

	recommendationNotificationsAttribute, ok := attributes["recommendation_notifications"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`recommendation_notifications is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	recommendationNotificationsVal, ok := recommendationNotificationsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`recommendation_notifications expected to be basetypes.BoolValue, was: %T`, recommendationNotificationsAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewUsersValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewUsersValueUnknown(), diags
	}

	return UsersValue{
		CommentNotifications:                 commentNotificationsVal,
		CreatedAt:                            createdAtVal,
		DonationNotifications:                donationNotificationsVal,
		Email:                                emailVal,
		FreeMemberSignupNotification:         freeMemberSignupNotificationVal,
		Id:                                   idVal,
		LastSeen:                             lastSeenVal,
		MentionNotifications:                 mentionNotificationsVal,
		MilestoneNotifications:               milestoneNotificationsVal,
		Name:                                 nameVal,
		PaidSubscriptionCanceledNotification: paidSubscriptionCanceledNotificationVal,
		PaidSubscriptionStartedNotification:  paidSubscriptionStartedNotificationVal,
		RecommendationNotifications:          recommendationNotificationsVal,
		Slug:                                 slugVal,
		Status:                               statusVal,
		UpdatedAt:                            updatedAtVal,
		Url:                                  urlVal,
		state:                                attr.ValueStateKnown,
	}, diags
}

func NewUsersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UsersValue {
	object, diags := NewUsersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUsersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UsersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUsersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUsersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUsersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUsersValueMust(UsersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UsersType) ValueType(ctx context.Context) attr.Value {
	return UsersValue{}
}

var _ basetypes.ObjectValuable = UsersValue{}

type UsersValue struct {
	CommentNotifications                 basetypes.BoolValue   `tfsdk:"comment_notifications"`
	CreatedAt                            basetypes.StringValue `tfsdk:"created_at"`
	DonationNotifications                basetypes.BoolValue   `tfsdk:"donation_notifications"`
	Email                                basetypes.StringValue `tfsdk:"email"`
	FreeMemberSignupNotification         basetypes.BoolValue   `tfsdk:"free_member_signup_notification"`
	Id                                   basetypes.StringValue `tfsdk:"id"`
	LastSeen                             basetypes.StringValue `tfsdk:"last_seen"`
	MentionNotifications                 basetypes.BoolValue   `tfsdk:"mention_notifications"`
	MilestoneNotifications               basetypes.BoolValue   `tfsdk:"milestone_notifications"`
	Name                                 basetypes.StringValue `tfsdk:"name"`
	PaidSubscriptionCanceledNotification basetypes.BoolValue   `tfsdk:"paid_subscription_canceled_notification"`
	PaidSubscriptionStartedNotification  basetypes.BoolValue   `tfsdk:"paid_subscription_started_notification"`
	RecommendationNotifications          basetypes.BoolValue   `tfsdk:"recommendation_notifications"`
	Slug                                 basetypes.StringValue `tfsdk:"slug"`
	Status                               basetypes.StringValue `tfsdk:"status"`
	UpdatedAt                            basetypes.StringValue `tfsdk:"updated_at"`
	Url                                  basetypes.StringValue `tfsdk:"url"`
	state                                attr.ValueState
}

func (v UsersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 17)

	var val tftypes.Value
	var err error

	attrTypes["comment_notifications"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["donation_notifications"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["free_member_signup_notification"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_seen"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["mention_notifications"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["milestone_notifications"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["paid_subscription_canceled_notification"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["paid_subscription_started_notification"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["recommendation_notifications"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["slug"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 17)

		val, err = v.CommentNotifications.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["comment_notifications"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.DonationNotifications.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["donation_notifications"] = val

		val, err = v.Email.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email"] = val

		val, err = v.FreeMemberSignupNotification.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["free_member_signup_notification"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.LastSeen.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_seen"] = val

		val, err = v.MentionNotifications.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mention_notifications"] = val

		val, err = v.MilestoneNotifications.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["milestone_notifications"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PaidSubscriptionCanceledNotification.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["paid_subscription_canceled_notification"] = val

		val, err = v.PaidSubscriptionStartedNotification.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["paid_subscription_started_notification"] = val

		val, err = v.RecommendationNotifications.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["recommendation_notifications"] = val

		val, err = v.Slug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slug"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UsersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UsersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UsersValue) String() string {
	return "UsersValue"
}

func (v UsersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"comment_notifications":           basetypes.BoolType{},
		"created_at":                      basetypes.StringType{},
		"donation_notifications":          basetypes.BoolType{},
		"email":                           basetypes.StringType{},
		"free_member_signup_notification": basetypes.BoolType{},
		"id":                              basetypes.StringType{},
		"last_seen":                       basetypes.StringType{},
		"mention_notifications":           basetypes.BoolType{},
		"milestone_notifications":         basetypes.BoolType{},
		"name":                            basetypes.StringType{},
		"paid_subscription_canceled_notification": basetypes.BoolType{},
		"paid_subscription_started_notification":  basetypes.BoolType{},
		"recommendation_notifications":            basetypes.BoolType{},
		"slug":                                    basetypes.StringType{},
		"status":                                  basetypes.StringType{},
		"updated_at":                              basetypes.StringType{},
		"url":                                     basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"comment_notifications":           v.CommentNotifications,
			"created_at":                      v.CreatedAt,
			"donation_notifications":          v.DonationNotifications,
			"email":                           v.Email,
			"free_member_signup_notification": v.FreeMemberSignupNotification,
			"id":                              v.Id,
			"last_seen":                       v.LastSeen,
			"mention_notifications":           v.MentionNotifications,
			"milestone_notifications":         v.MilestoneNotifications,
			"name":                            v.Name,
			"paid_subscription_canceled_notification": v.PaidSubscriptionCanceledNotification,
			"paid_subscription_started_notification":  v.PaidSubscriptionStartedNotification,
			"recommendation_notifications":            v.RecommendationNotifications,
			"slug":                                    v.Slug,
			"status":                                  v.Status,
			"updated_at":                              v.UpdatedAt,
			"url":                                     v.Url,
		})

	return objVal, diags
}

func (v UsersValue) Equal(o attr.Value) bool {
	other, ok := o.(UsersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CommentNotifications.Equal(other.CommentNotifications) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.DonationNotifications.Equal(other.DonationNotifications) {
		return false
	}

	if !v.Email.Equal(other.Email) {
		return false
	}

	if !v.FreeMemberSignupNotification.Equal(other.FreeMemberSignupNotification) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.LastSeen.Equal(other.LastSeen) {
		return false
	}

	if !v.MentionNotifications.Equal(other.MentionNotifications) {
		return false
	}

	if !v.MilestoneNotifications.Equal(other.MilestoneNotifications) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PaidSubscriptionCanceledNotification.Equal(other.PaidSubscriptionCanceledNotification) {
		return false
	}

	if !v.PaidSubscriptionStartedNotification.Equal(other.PaidSubscriptionStartedNotification) {
		return false
	}

	if !v.RecommendationNotifications.Equal(other.RecommendationNotifications) {
		return false
	}

	if !v.Slug.Equal(other.Slug) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v UsersValue) Type(ctx context.Context) attr.Type {
	return UsersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UsersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"comment_notifications":           basetypes.BoolType{},
		"created_at":                      basetypes.StringType{},
		"donation_notifications":          basetypes.BoolType{},
		"email":                           basetypes.StringType{},
		"free_member_signup_notification": basetypes.BoolType{},
		"id":                              basetypes.StringType{},
		"last_seen":                       basetypes.StringType{},
		"mention_notifications":           basetypes.BoolType{},
		"milestone_notifications":         basetypes.BoolType{},
		"name":                            basetypes.StringType{},
		"paid_subscription_canceled_notification": basetypes.BoolType{},
		"paid_subscription_started_notification":  basetypes.BoolType{},
		"recommendation_notifications":            basetypes.BoolType{},
		"slug":                                    basetypes.StringType{},
		"status":                                  basetypes.StringType{},
		"updated_at":                              basetypes.StringType{},
		"url":                                     basetypes.StringType{},
	}
}
